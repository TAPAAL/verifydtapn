# This is a basic workflow to help you get started with Actions

name: Build Windows (Cross Compile)

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

#env:
#    BOOST_ROOT : "/usr/local/share/boost/1.69.0" 
#    Boost_INCLUDE_DIR : "/usr/local/share/boost/1.69.0/libs/headers"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - name: Install depends
      run: |
        sudo apt install flex bison libboost-all-dev libsparsehash-dev cmake build-essential
        sudo apt install mingw-w64-x86-64-dev mingw-w64-tools g++-mingw-w64-x86-64
    
    - name: Setup Dependency
      run: | 
        TARGET=x86_64-w64-mingw32
        ADDRM=64
        MTUNE=generic

        CORES=$(nproc || 1)

        export CC=x86_64-w64-mingw32-gcc
        export CXX=x86_64-w64-mingw32-g++

        export PREFIX=$(mktemp -d -p .) #Or set it to path where libs are saved
        export PREFIX=$(realpath $PREFIX)
        
        BOOST=boost_1_72_0
        VER=${BOOST#boost_}
        VER=${VER//_/.}
        
        wget -nv "https://boostorg.jfrog.io/artifactory/main/release/$VER/source/$BOOST.tar.bz2"
        tar xf $BOOST.tar.bz2

        cd $BOOST
        CC= CXX= ./bootstrap.sh --prefix="$PREFIX" --without-icu
        cat > win$ADDRM-config.jam << EOF
        using gcc : m : $CXX
                :
        ;
        EOF

        ./b2 toolset=gcc-m target-os=windows cflags="-mtune=$MTUNE" cxxstd=17 cxxflags="-mtune=$MTUNE" address-model="$ADDRM" binary-format="pe" abi="ms" threading="multi" threadapi="win32" variant=release --user-config="win$ADDRM-config.jam" --prefix="$PREFIX" --without-mpi --without-python --without-coroutine --without-graph --without-graph_parallel --without-wave --without-context -sNO_BZIP2=1 -j$CORES install
        cd ..
        
        sudo apt install unzip
        wget https://github.com/sparsehash/sparsehash/archive/sparsehash-2.0.4.zip
        unzip sparsehash-2.0.4.zip

        cd sparsehash-sparsehash-2.0.4

        ./configure --prefix=$PREFIX CXXFLAGS=-std=c++11 --host win
        make
        make install

        cd ..
        
        mkdir build-win && cd build-win
        cmake ../ -DCMAKE_TOOLCHAIN_FILE=../toolchain-x86_64-w64-mingw32.cmake -DBOOST_ROOT=$PREFIX
        CPATH=$PREFIX/include make
    
    #- name: Build 
    #  uses: lukka/run-cmake@v3
    #  with:
    #    cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
    #    cmakeAppendedArgs: >-
    #      -DFLEX_EXECUTABLE=/usr/local/opt/flex/bin/flex 
    #      -DBISON_EXECUTABLE=/usr/local/opt/bison/bin/bison
    #    cmakeBuildType: Release
    #    cmakeGenerator: UnixMakefiles
    #    buildDirectory: '${{runner.workspace}}/build'     
    
    - name: Upload artifacts 
      uses: actions/upload-artifact@v2
      with:
        name: verifydtapn-win64
        path: '${{runner.workspace}}/build-win/bin/verifydtapn-win64.exe'
